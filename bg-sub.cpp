//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
#include <stdlib.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Mat secondfgMaskMOG2;
Mat ballPathFrame; //this is your image to draw, don't forget to load it
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
Ptr<BackgroundSubtractor> secondPMOG2;

// Initial Ball Location
Int ballX = 960
Int ballY = 200
// Strike Zone/Path Zone
Int initSzWidth = 500
Int initSzHeight = 300

double fgThreshold = 0.1;
double secondFgThreshold = 0.5;
char keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bg_sub {-vid <video filename>|-img <image filename>}"                     << endl
    << "for example: ./bg_sub -vid video.avi 0.05"                                  << endl
    << "or: ./bg_sub -img /data/images/1.png"                                       << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}

Mat& ScanImageAndReduceC(Mat& I)
{
    // accept only char type matrices
    CV_Assert(I.depth() == CV_8U);

    int channels = I.channels();

    int nRows = I.rows;
    int nCols = I.cols * channels;

    cout << "Rows: " << nRows << endl;
    cout << "Cols: " << nCols << endl;

    if (I.isContinuous())
    {
        cout << "Continuous table found" << endl;
        nCols *= nRows;
        nRows = 1;
    }

    int i,j;
    uchar* p;
    for( i = 0; i < 2; ++i)
    {
    //    p = I.ptr<uchar>(i);
        for ( j = 0; j < nCols; ++j)
        {
          Scalar intensity = I.at<uchar>(i,j);
          //cout << intensity.val[0] << endl;

        //    cout << p[j].val[0] << endl;
        }
    }
    return I;
}

int main(int argc, char* argv[]) {
    //print help information
    help();
    //check for the input parameter correctness
    if(argc != 4) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    //namedWindow("Ball path");
    //namedWindow("Frame");
    namedWindow("FG Mask MOG 2", WINDOW_NORMAL);
    //namedWindow("Second FG Mask MOG 2");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    //secondPMOG2 = createBackgroundSubtractorMOG2();
    if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        fgThreshold = atof(argv[3]);
        processVideo(argv[2]);
    }
    else if(strcmp(argv[1], "-img") == 0) {
        //input data coming from a sequence of images
        processImages(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}

void processVideo(char* videoFilename) {
    //create the capture object
    VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    keyboard = 0;

    // path variables
    // Write the ball path
    std::vector<cv::Point> ballLocations; //fill this vector with points, they should be ordered
    int pathX = 200;
    int pathY = 50;
    cv::Scalar color(0, 0, 255); //red

    for(int i = 10; i < 1000 - 1; ++i)
    {
        Point pt;
        pt.x = i;//pathX;
        pt.y = i;
        ballLocations.push_back(pt);
    }

    while( keyboard != 'q' && keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2, fgThreshold);
        //secondPMOG2->apply(fgMaskMOG2, secondfgMaskMOG2, secondFgThreshold); // For fun...

        //get the frame number and write it on the current frame
        stringstream ss;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        ss << capture.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

        ballPathFrame = frame;
        // paint the ball path
        //printf("%d\n", ballLocations.size());
        for(int i = 0; i < ballLocations.size() - 1; ++i)
        {
           cv::line(ballPathFrame, ballLocations[i], ballLocations[i+1], color);
        }

        Mat frame;
        frame = ScanImageAndReduceC(fgMaskMOG2);

        //show the current frame and the fg masks
        //imshow("Ball path", ballPathFrame);
        //imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //imshow("Second FG Mask MOG 2", secondfgMaskMOG2);

        //get the input from the keyboard
        keyboard = (char)waitKey( 90 );
    }
    //delete capture object
    capture.release();
}

void processImages(char* fistFrameFilename) {
    //read the first file of the sequence
    frame = imread(fistFrameFilename);
    if(frame.empty()){
        //error in opening the first image
        cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
        exit(EXIT_FAILURE);
    }
    //current image filename
    string fn(fistFrameFilename);
    //read input data. ESC or 'q' for quitting
    keyboard = 0;
    while( keyboard != 'q' && keyboard != 27 ){
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        size_t index = fn.find_last_of("/");
        if(index == string::npos) {
            index = fn.find_last_of("\\");
        }
        size_t index2 = fn.find_last_of(".");
        string prefix = fn.substr(0,index+1);
        string suffix = fn.substr(index2);
        string frameNumberString = fn.substr(index+1, index2-index-1);
        istringstream iss(frameNumberString);
        int frameNumber = 0;
        iss >> frameNumber;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = (char)waitKey( 30 );
        //search for the next image in the sequence
        ostringstream oss;
        oss << (frameNumber + 1);
        string nextFrameNumberString = oss.str();
        string nextFrameFilename = prefix + nextFrameNumberString + suffix;
        //read the next frame
        frame = imread(nextFrameFilename);
        if(frame.empty()){
            //error in opening the next image in the sequence
            cerr << "Unable to open image frame: " << nextFrameFilename << endl;
            exit(EXIT_FAILURE);
        }
        //update the path of the current frame
        fn.assign(nextFrameFilename);
    }
}
