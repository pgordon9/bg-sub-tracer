//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
#include <stdlib.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat ; //current
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Mat secondfgMaskMOG2;
Mat ballPath; //this is your image to draw, don't forget to load it
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
Ptr<BackgroundSubtractor> secondPMOG2;

// Initial Ball Location
int ballX = 1000;
int ballY = 770;

// Strike Zone/Path Zone
int initSzWidth = 300;
int initSzHeight = 400;

int leftBorder = ballX - (initSzWidth / 2);
int rightBorder = ballX + (initSzWidth / 2);
int bottomBorder = ballY - (initSzHeight / 4) * 3;
int topBorder = ballY + (initSzHeight / 4);

double fgThreshold = 0.1;
double secondFgThreshold = 0.5;
char keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFilename);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bg_sub {-vid <video filename>|-img <image filename>}"                     << endl
    << "for example: ./bg_sub -vid video.avi 0.05"                                  << endl
    << "or: ./bg_sub -img /data/images/1.png"                                       << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}

Mat next;

Mat& ScanImageAndReduceC(Mat& curr, Mat& prev)
{
    // accept only char type matrices
    CV_Assert(curr.depth() == CV_8U);

    int channels = curr.channels();

    int nRows = curr.rows;
    int nCols = curr.cols * channels;

    cout << "Rows: " << nRows << endl;
    cout << "Cols: " << nCols << endl;

    if (curr.isContinuous())
    {
        cout << "Continuous table found" << endl;
        nCols *= nRows;
        nRows = 1;
    }

    int i,j;
    uchar* p;


    // for( i = leftBorder; i < rightBorder; ++i)
    // {
    // //    p = I.ptr<uchar>(i);
    //     for ( j = bottomBorder; j < topBorder; ++j)
    //     {
    //       Scalar intensity = I.at<uchar>(i,j);
    //       //cout << intensity.val[0] << endl;
    //      //    cout << p[j].val[0] << endl;
    //     }
    // }
    return I;
}

int main(int argc, char* argv[]) {
    //print help information
    help();
    //check for the input parameter correctness
    if(argc != 4) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    //namedWindow("Ball path");
    //namedWindow("");
    namedWindow("FG Mask MOG 2", WINDOW_NORMAL);
    //namedWindow("Second FG Mask MOG 2");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    //secondPMOG2 = createBackgroundSubtractorMOG2();
    if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        fgThreshold = atof(argv[3]);
        processVideo(argv[2]);
    }
    else if(strcmp(argv[1], "-img") == 0) {
        //input data coming from a sequence of images
        processImages(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}

void processVideo(char* videoFilename) {
    //create the capture object
    VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    keyboard = 0;

    // path variables
    // Write the ball path
    std::vector<cv::Point> ballLocations; //fill this vector with points, they should be ordered
    int pathX = 200;
    int pathY = 50;
    cv::Scalar color(0, 0, 255); //red

    for(int i = 10; i < 1000 - 1; ++i)
    {
        Point pt;
        pt.x = i;//pathX;
        pt.y = i;
        ballLocations.push_back(pt);
    }

    while( keyboard != 'q' && keyboard != 27 ){
        //read the current
        if(!capture.read()) {
            cerr << "Unable to read next ." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the background model
        pMOG2->apply(, fgMaskMOG2, fgThreshold);
        //secondPMOG2->apply(fgMaskMOG2, secondfgMaskMOG2, secondFgThreshold); // For fun...

        //get the  number and write it on the current
        stringstream ss;
        rectangle(fgMaskMOG2, cv::Point(leftBorder, bottomBorder), cv::Point(rightBorder, topBorder),
                  cv::Scalar(255,255,255), 1);
        ss << capture.get(CAP_PROP_POS_S);
        string NumberString = ss.str();
        putText(, NumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

        //ballPath = ;
        // paint the ball path
        //printf("%d\n", ballLocations.size());
        for(int i = 0; i < ballLocations.size() - 1; ++i)
        {
           cv::line(ballPath, ballLocations[i], ballLocations[i+1], color);
        }

        Mat ;= ScanImageAndReduceC(fgMaskMOG2);

        //show the current  and the fg masks
        //imshow("Ball path", ballPath);
        //imshow("", );
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //imshow("Second FG Mask MOG 2", secondfgMaskMOG2);

        //get the input from the keyboard
        keyboard = (char)waitKey( 90 );

        // Iterate the zone..
        bottomBorder = bottomBorder - 3;
        topBorder = topBorder - 3;
    }
    //delete capture object
    capture.release();
}

void processImages(char* fistFilename) {
    //read the first file of the sequence
     = imread(fistFilename);
    if(.empty()){
        //error in opening the first image
        cerr << "Unable to open first image : " << fistFilename << endl;
        exit(EXIT_FAILURE);
    }
    //current image filename
    string fn(fistFilename);
    //read input data. ESC or 'q' for quitting
    keyboard = 0;
    while( keyboard != 'q' && keyboard != 27 ){
        //update the background model
        pMOG2->apply(, fgMaskMOG2);
        //get the  number and write it on the current
        size_t index = fn.find_last_of("/");
        if(index == string::npos) {
            index = fn.find_last_of("\\");
        }
        size_t index2 = fn.find_last_of(".");
        string prefix = fn.substr(0,index+1);
        string suffix = fn.substr(index2);
        string NumberString = fn.substr(index+1, index2-index-1);
        istringstream iss(NumberString);
        int Number = 0;
        iss >> Number;
        rectangle(, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        putText(, NumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current  and the fg masks
        imshow("", );
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = (char)waitKey( 30 );
        //search for the next image in the sequence
        ostringstream oss;
        oss << (Number + 1);
        string nextNumberString = oss.str();
        string nextFilename = prefix + nextNumberString + suffix;
        //read the next
         = imread(nextFilename);
        if(.empty()){
            //error in opening the next image in the sequence
            cerr << "Unable to open image : " << nextFilename << endl;
            exit(EXIT_FAILURE);
        }
        //update the path of the current
        fn.assign(nextFilename);
    }
}
